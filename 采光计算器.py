import math
import numpy as np
import tkinter as tk
from tkinter import messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import matplotlib


matplotlib.rcParams['font.sans-serif'] = ['SimHei']
matplotlib.rcParams['axes.unicode_minus'] = False  

city_latitudes = {
    # 北京市
    "北京市": 39.9042,

    # 天津市
    "天津市": 39.0842,

    # 河北省
    "石家庄市": 38.0428, "唐山市": 39.6309, "秦皇岛市": 39.9354, "邯郸市": 36.6255,
    "邢台市": 37.0706, "保定市": 38.8739, "张家口市": 40.8244, "承德市": 40.9519,
    "沧州市": 38.3045, "廊坊市": 39.5219, "衡水市": 37.7353,

    # 山西省
    "太原市": 37.8706, "大同市": 40.0768, "阳泉市": 37.8563, "长治市": 36.1954,
    "晋城市": 35.4904, "朔州市": 39.3316, "晋中市": 37.6870, "运城市": 35.0264,
    "忻州市": 38.4167, "临汾市": 36.0882, "吕梁市": 37.5183,

    # 内蒙古自治区
    "呼和浩特市": 40.8415, "包头市": 40.6578, "乌海市": 39.6554, "赤峰市": 42.2578,
    "通辽市": 43.6529, "鄂尔多斯市": 39.6083, "呼伦贝尔市": 49.2116, "巴彦淖尔市": 40.7432,
    "乌兰察布市": 41.0317,

    # 辽宁省
    "沈阳市": 41.8057, "大连市": 38.9140, "鞍山市": 41.1086, "抚顺市": 41.8809,
    "本溪市": 41.2941, "丹东市": 40.0005, "锦州市": 41.0951, "营口市": 40.6670,
    "阜新市": 42.0216, "辽阳市": 41.2672, "盘锦市": 41.1198, "铁岭市": 42.2237,
    "朝阳市": 41.5735, "葫芦岛市": 40.7110,

    # 吉林省
    "长春市": 43.8171, "吉林市": 43.8379, "四平市": 43.1668, "辽源市": 42.8879,
    "通化市": 41.7284, "白山市": 41.9399, "松原市": 45.1411, "白城市": 45.6196,

    # 黑龙江省
    "哈尔滨市": 45.8038, "齐齐哈尔市": 47.3543, "鸡西市": 45.2951, "鹤岗市": 47.3499,
    "双鸭山市": 46.6461, "大庆市": 46.5877, "伊春市": 47.7275, "佳木斯市": 46.8000,
    "七台河市": 45.7707, "牡丹江市": 44.5515, "黑河市": 50.2453, "绥化市": 46.6532,

    # 上海市
    "上海市": 31.2304,

    # 江苏省
    "南京市": 32.0603, "无锡市": 31.4912, "徐州市": 34.2058, "常州市": 31.8107,
    "苏州市": 31.2989, "南通市": 31.9802, "连云港市": 34.5967, "淮安市": 33.6104,
    "盐城市": 33.3474, "扬州市": 32.3932, "镇江市": 32.1877, "泰州市": 32.4555,
    "宿迁市": 33.9619,

    # 浙江省
    "杭州市": 30.2741, "宁波市": 29.8683, "温州市": 28.0006, "嘉兴市": 30.7450,
    "湖州市": 30.8930, "绍兴市": 30.0303, "金华市": 29.0790, "衢州市": 28.9701,
    "舟山市": 29.9853, "台州市": 28.6564, "丽水市": 28.4676,

    # 安徽省
    "合肥市": 31.8206, "芜湖市": 31.3529, "蚌埠市": 32.9163, "淮南市": 32.6255,
    "马鞍山市": 31.6702, "淮北市": 33.9550, "铜陵市": 30.9457, "安庆市": 30.5429,
    "黄山市": 29.7152, "滁州市": 32.3015, "阜阳市": 32.8901, "宿州市": 33.6461,
    "六安市": 31.7349, "亳州市": 33.8446, "池州市": 30.6648, "宣城市": 30.9407,

    # 福建省
    "福州市": 26.0745, "厦门市": 24.4798, "莆田市": 25.4540, "三明市": 26.2639,
    "泉州市": 24.8741, "漳州市": 24.5130, "南平市": 26.6413, "龙岩市": 25.0751,
    "宁德市": 26.6655,

    # 江西省
    "南昌市": 28.6820, "景德镇市": 29.2687, "萍乡市": 27.6229, "九江市": 29.7051,
    "新余市": 27.8178, "鹰潭市": 28.2602, "赣州市": 25.8311, "吉安市": 27.1134,
    "宜春市": 27.8142, "抚州市": 27.9492, "上饶市": 28.4549,

    # 山东省
    "济南市": 36.6512, "青岛市": 36.0671, "淄博市": 36.8135, "枣庄市": 34.8109,
    "东营市": 37.4335, "烟台市": 37.4638, "潍坊市": 36.7069, "济宁市": 35.4149,
    "泰安市": 36.2003, "威海市": 37.5133, "日照市": 35.4167, "临沂市": 35.1047,
    "德州市": 37.4353, "聊城市": 36.4567, "滨州市": 37.3826, "菏泽市": 35.2338,

    # 河南省
    "郑州市": 34.7473, "开封市": 34.7973, "洛阳市": 34.6197, "平顶山市": 33.7662,
    "安阳市": 36.0974, "鹤壁市": 35.7472, "新乡市": 35.3030, "焦作市": 35.2154,
    "濮阳市": 35.7619, "许昌市": 34.0357, "漯河市": 33.5814, "三门峡市": 34.7724,
    "南阳市": 32.9908, "商丘市": 34.4142, "信阳市": 32.1470, "周口市": 33.6250,
    "驻马店市": 33.0115,

    # 湖北省
    "武汉市": 30.5928, "黄石市": 30.1996, "十堰市": 32.6294, "宜昌市": 30.6919,
    "襄阳市": 32.0090, "鄂州市": 30.3910, "荆门市": 31.0354, "孝感市": 30.9246,
    "荆州市": 30.3348, "黄冈市": 30.4537, "咸宁市": 29.8414, "随州市": 31.6904,

    # 湖南省
    "长沙市": 28.2282, "株洲市": 27.8275, "湘潭市": 27.8297, "衡阳市": 26.8932,
    "邵阳市": 27.2389, "岳阳市": 29.3572, "常德市": 29.0314, "张家界市": 29.1171,
    "益阳市": 28.5539, "郴州市": 25.7705, "永州市": 26.4203, "怀化市": 27.5691,
    "娄底市": 27.6974,

    # 广东省
    "广州市": 23.1291, "韶关市": 24.8104, "深圳市": 22.5431, "珠海市": 22.2707,
    "汕头市": 23.3541, "佛山市": 23.0215, "江门市": 22.5787, "湛江市": 21.2713,
    "茂名市": 21.6629, "肇庆市": 23.0472, "惠州市": 23.1118, "梅州市": 24.2886,
    "汕尾市": 22.7862, "河源市": 23.7439, "阳江市": 21.8579, "清远市": 23.6820,
    "东莞市": 23.0205, "中山市": 22.5176, "潮州市": 23.6569, "揭阳市": 23.5497,
    "云浮市": 22.9153,

    # 广西壮族自治区
    "南宁市": 22.8170, "柳州市": 24.3259, "桂林市": 25.2736, "梧州市": 23.4769,
    "北海市": 21.4813, "防城港市": 21.6869, "钦州市": 21.9799, "贵港市": 23.1115,
    "玉林市": 22.6545, "百色市": 23.9022, "贺州市": 24.4035, "河池市": 24.6929,
    "来宾市": 23.7503, "崇左市": 22.3773,

    # 海南省
    "海口市": 20.0440, "三亚市": 18.2528, "三沙市": 16.8330, "儋州市": 19.5211,

    # 重庆市
    "重庆市": 29.5630,

    # 四川省
    "成都市": 30.5728, "自贡市": 29.3390, "攀枝花市": 26.5823, "泸州市": 28.8718,
    "德阳市": 31.1268, "绵阳市": 31.4675, "广元市": 32.4355, "遂宁市": 30.5328,
    "内江市": 29.5802, "乐山市": 29.5521, "南充市": 30.8373, "眉山市": 30.0754,
    "宜宾市": 28.7518, "广安市": 30.4559, "达州市": 31.2096, "雅安市": 29.9816,
    "巴中市": 31.8679, "资阳市": 30.1286,

    # 贵州省
    "贵阳市": 26.6477, "六盘水市": 26.5930, "遵义市": 27.7255, "安顺市": 26.2537,
    "毕节市": 27.3026, "铜仁市": 27.7315,

    # 云南省
    "昆明市": 24.8801, "曲靖市": 25.4900, "玉溪市": 24.3478, "保山市": 25.1120,
    "昭通市": 27.3382, "丽江市": 26.8550, "普洱市": 22.8251, "临沧市": 23.8838,

    # 西藏自治区
    "拉萨市": 29.6441, "日喀则市": 29.2675, "昌都市": 31.1406, "林芝市": 29.6489,
    "山南市": 29.2371,

    # 陕西省
    "西安市": 34.3416, "铜川市": 34.8968, "宝鸡市": 34.3619, "咸阳市": 34.3296,
    "渭南市": 34.4998, "延安市": 36.5851, "汉中市": 33.0675, "榆林市": 38.2854,
    "安康市": 32.6849, "商洛市": 33.8683,

    # 甘肃省
    "兰州市": 36.0611, "嘉峪关市": 39.7731, "金昌市": 38.5201, "白银市": 36.5447,
    "天水市": 34.5809, "武威市": 37.9283, "张掖市": 38.9259, "平凉市": 35.5430,
    "酒泉市": 39.7324, "庆阳市": 35.7095, "定西市": 35.5807, "陇南市": 33.4007,

    # 青海省
    "西宁市": 36.6171, "海东市": 36.5020,

    # 宁夏回族自治区
    "银川市": 38.4872, "石嘴山市": 39.0193, "吴忠市": 37.9852, "固原市": 36.0159,
    "中卫市": 37.5002,

    # 新疆维吾尔自治区
    "乌鲁木齐市": 43.8256, "克拉玛依市": 45.5799, "吐鲁番市": 42.9513, "哈密市": 42.8185,

    # 台湾省(主要城市)
    "台北市": 25.0320, "高雄市": 22.6273, "台中市": 24.1477, "台南市": 22.9997,

    # 香港特别行政区
    "香港特别行政区": 22.3193,

    # 澳门特别行政区
    "澳门特别行政区": 22.1987,

    # 自治州
    "延边朝鲜族自治州": 42.8913, "恩施土家族苗族自治州": 30.2722, "湘西土家族苗族自治州": 28.3119,
    "阿坝藏族羌族自治州": 31.8994, "甘孜藏族自治州": 30.0507, "凉山彝族自治州": 27.8816,
    "黔东南苗族侗族自治州": 26.5834, "黔南布依族苗族自治州": 26.2543, "黔西南布依族苗族自治州": 25.0879,
    "西双版纳傣族自治州": 22.0094, "德宏傣族景颇族自治州": 24.4334, "怒江傈僳族自治州": 25.8520,
    "大理白族自治州": 25.6065, "迪庆藏族自治州": 27.8191, "文山壮族苗族自治州": 23.4000,
    "红河哈尼族彝族自治州": 23.3642, "楚雄彝族自治州": 25.0458, "昌吉回族自治州": 44.0112,
    "巴音郭楞蒙古自治州": 41.7641, "克孜勒苏柯尔克孜自治州": 39.7145, "博尔塔拉蒙古自治州": 44.9060,
    "伊犁哈萨克自治州": 43.9168, "海北藏族自治州": 36.9544, "黄南藏族自治州": 35.5193,
    "海南藏族自治州": 36.2864, "果洛藏族自治州": 34.4714, "玉树藏族自治州": 33.0117,
    "海西蒙古族藏族自治州": 37.3771
}


def solar_altitude_by_city(city):
    """
    输入城市名，返回该城市全年每天正午太阳高度角（数组，长度365）
    """
    if city not in city_latitudes:
        messagebox.showerror("未找到城市的纬度", "未查询到该城市,请检查城市名称是否为地级市")
        return 0

    latitude = city_latitudes[city]
    days = np.arange(1, 366)  # 一年365天
    declination = 23.44 * np.sin(2 * np.pi * (days - 81) / 365)  # 赤纬角
    altitude = 90 - np.abs(latitude - declination)  # 正午太阳高度角
    return altitude

# #输入纬度计算全年每天正午太阳高度角
# def solar_altitude_angles(latitude):
#     """输入纬度（度），输出一年中每天正午太阳高度角的数组"""
#     days = np.arange(1, 366)  # 一年 365 天
#     declination = 23.44 * np.sin(2 * np.pi * (days - 81) / 365)
#     altitude = 90 - np.abs(latitude - declination)
#     return altitude

def calculate_winter_solstice_altitude(city):
    """
    输入纬度（度），返回冬至日正午太阳高度角（度）
    """
    if city not in city_latitudes:
        messagebox.showerror("未找到城市的纬度", "未查询到该城市,请检查城市名称是否为地级市")
        return 0
    latitude = city_latitudes[city]
    declination = -23.44  # 冬至日赤纬角
    altitude = 90 - abs(latitude - declination)
    return altitude

def calculate():
    try:
        layer_hight = float(entry_layer_hight.get())
        num_zhedang = float(entry_num_zhedang.get())
        loujianju = float(entry_loujianju.get())
        layer = float(entry_layer.get())

    except ValueError:
        messagebox.showerror("输入错误", "请确保所有输入都是数字")
        return
    try:
        city = entry_city.get().strip()
        if not city.endswith("市"):
            city += "市"
    except ValueError:
        messagebox.showerror("输入错误", "请确保城市名字为正确汉字")
        return
    height = layer_hight * num_zhedang
    altitudes = solar_altitude_by_city(city)

    count = 0
    louceng_list = []

    for altitude in altitudes:
        radian = math.radians(altitude)
        louceng = (height - loujianju * math.tan(radian)) / layer_hight
        louceng_list.append(louceng)
        if louceng < layer:
            count += 1

    # 计算冬至日的正午太阳高度角
    winter_solstice_altitude = calculate_winter_solstice_altitude(city)
    louceng_last_day = louceng_list[-1]
    # 使用math.atan()并转换为角度
    tan_value = height / loujianju
    angle_deg = math.degrees(math.atan(tan_value))

    # 弹窗显示计算结果
    result_text = f"全年采光分析结果：\n\n"
    result_text += f"冬至日正午太阳高度角: {winter_solstice_altitude:.2f} 度\n"
    result_text += f"全年都能采到光的最低楼层: {louceng_last_day:.2f} 层\n"
    result_text += f"你买的楼层全年能采到光的天数: {count} 天\n"
    result_text += f"你买的楼层全年采不到光的天数: {365 - count} 天"
    messagebox.showinfo("计算结果", result_text)

    # 绘制全年采光情况图
    fig.clear()
    ax = fig.add_subplot(111)
    days = np.arange(1, 366)
    ax.plot(days, altitudes, label='正午太阳高度角 (°)', color='orange')
    ax.axhline(y=angle_deg, color='blue', linestyle='--', label='你买的楼层参考线')
    ax.set_xlabel("天数")
    ax.set_ylabel("太阳高度角 / 楼层参考")
    ax.set_title("全年正午太阳高度角与采光情况")
    ax.legend()
    ax.grid(True)

    canvas.draw()

# ---------------------UI界面---------------------
root = tk.Tk()
root.title("全年楼层采光计算器")
root.geometry("700x600")
root.configure(bg="#f0f0f0")

title_label = tk.Label(root, text="🏢 全年楼层采光计算器", font=("Helvetica", 18, "bold"), bg="#f0f0f0")
title_label.pack(pady=10)

frame_inputs = tk.Frame(root, bg="#f0f0f0")
frame_inputs.pack(pady=10)

# 输入框
labels = ["楼层层高 (m)", "遮挡楼层数", "楼间距 (m)", "你买的楼层", "所在城市(输入汉字，精确到地级市)"]
entries = []
for i, text in enumerate(labels):
    tk.Label(frame_inputs, text=text, bg="#f0f0f0", font=("Helvetica", 12)).grid(row=i, column=0, padx=5, pady=5, sticky="e")
    entry = tk.Entry(frame_inputs, font=("Helvetica", 12))
    entry.grid(row=i, column=1, padx=5, pady=5)
    entries.append(entry)

entry_layer_hight, entry_num_zhedang, entry_loujianju, entry_layer, entry_city = entries

# 计算按钮
btn_calculate = tk.Button(root, text="计算采光", font=("Helvetica", 14, "bold"), bg="#4CAF50", fg="white", command=calculate)
btn_calculate.pack(pady=10)

# 绘图区域
fig = plt.Figure(figsize=(7,4), dpi=100)
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(pady=10)

root.mainloop()

